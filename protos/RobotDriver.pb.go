// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: RobotDriver.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DriverRequest) Reset() {
	*x = DriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RobotDriver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverRequest) ProtoMessage() {}

func (x *DriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_RobotDriver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverRequest.ProtoReflect.Descriptor instead.
func (*DriverRequest) Descriptor() ([]byte, []int) {
	return file_RobotDriver_proto_rawDescGZIP(), []int{0}
}

func (x *DriverRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DriverResponse) Reset() {
	*x = DriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RobotDriver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverResponse) ProtoMessage() {}

func (x *DriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_RobotDriver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverResponse.ProtoReflect.Descriptor instead.
func (*DriverResponse) Descriptor() ([]byte, []int) {
	return file_RobotDriver_proto_rawDescGZIP(), []int{1}
}

func (x *DriverResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_RobotDriver_proto protoreflect.FileDescriptor

var file_RobotDriver_proto_rawDesc = []byte{
	0x0a, 0x11, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0d, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x24, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RobotDriver_proto_rawDescOnce sync.Once
	file_RobotDriver_proto_rawDescData = file_RobotDriver_proto_rawDesc
)

func file_RobotDriver_proto_rawDescGZIP() []byte {
	file_RobotDriver_proto_rawDescOnce.Do(func() {
		file_RobotDriver_proto_rawDescData = protoimpl.X.CompressGZIP(file_RobotDriver_proto_rawDescData)
	})
	return file_RobotDriver_proto_rawDescData
}

var file_RobotDriver_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_RobotDriver_proto_goTypes = []interface{}{
	(*DriverRequest)(nil),  // 0: proto.DriverRequest
	(*DriverResponse)(nil), // 1: proto.DriverResponse
}
var file_RobotDriver_proto_depIdxs = []int32{
	0, // 0: proto.RobotDriver.Control:input_type -> proto.DriverRequest
	0, // 1: proto.RobotDriver.StreamControl:input_type -> proto.DriverRequest
	1, // 2: proto.RobotDriver.Control:output_type -> proto.DriverResponse
	1, // 3: proto.RobotDriver.StreamControl:output_type -> proto.DriverResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_RobotDriver_proto_init() }
func file_RobotDriver_proto_init() {
	if File_RobotDriver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RobotDriver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RobotDriver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RobotDriver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RobotDriver_proto_goTypes,
		DependencyIndexes: file_RobotDriver_proto_depIdxs,
		MessageInfos:      file_RobotDriver_proto_msgTypes,
	}.Build()
	File_RobotDriver_proto = out.File
	file_RobotDriver_proto_rawDesc = nil
	file_RobotDriver_proto_goTypes = nil
	file_RobotDriver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RobotDriverClient is the client API for RobotDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RobotDriverClient interface {
	Control(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (*DriverResponse, error)
	StreamControl(ctx context.Context, opts ...grpc.CallOption) (RobotDriver_StreamControlClient, error)
}

type robotDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotDriverClient(cc grpc.ClientConnInterface) RobotDriverClient {
	return &robotDriverClient{cc}
}

func (c *robotDriverClient) Control(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (*DriverResponse, error) {
	out := new(DriverResponse)
	err := c.cc.Invoke(ctx, "/proto.RobotDriver/Control", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotDriverClient) StreamControl(ctx context.Context, opts ...grpc.CallOption) (RobotDriver_StreamControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RobotDriver_serviceDesc.Streams[0], "/proto.RobotDriver/StreamControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &robotDriverStreamControlClient{stream}
	return x, nil
}

type RobotDriver_StreamControlClient interface {
	Send(*DriverRequest) error
	Recv() (*DriverResponse, error)
	grpc.ClientStream
}

type robotDriverStreamControlClient struct {
	grpc.ClientStream
}

func (x *robotDriverStreamControlClient) Send(m *DriverRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *robotDriverStreamControlClient) Recv() (*DriverResponse, error) {
	m := new(DriverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RobotDriverServer is the server API for RobotDriver service.
type RobotDriverServer interface {
	Control(context.Context, *DriverRequest) (*DriverResponse, error)
	StreamControl(RobotDriver_StreamControlServer) error
}

// UnimplementedRobotDriverServer can be embedded to have forward compatible implementations.
type UnimplementedRobotDriverServer struct {
}

func (*UnimplementedRobotDriverServer) Control(context.Context, *DriverRequest) (*DriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (*UnimplementedRobotDriverServer) StreamControl(RobotDriver_StreamControlServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamControl not implemented")
}

func RegisterRobotDriverServer(s *grpc.Server, srv RobotDriverServer) {
	s.RegisterService(&_RobotDriver_serviceDesc, srv)
}

func _RobotDriver_Control_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotDriverServer).Control(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RobotDriver/Control",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotDriverServer).Control(ctx, req.(*DriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotDriver_StreamControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RobotDriverServer).StreamControl(&robotDriverStreamControlServer{stream})
}

type RobotDriver_StreamControlServer interface {
	Send(*DriverResponse) error
	Recv() (*DriverRequest, error)
	grpc.ServerStream
}

type robotDriverStreamControlServer struct {
	grpc.ServerStream
}

func (x *robotDriverStreamControlServer) Send(m *DriverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *robotDriverStreamControlServer) Recv() (*DriverRequest, error) {
	m := new(DriverRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RobotDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RobotDriver",
	HandlerType: (*RobotDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Control",
			Handler:    _RobotDriver_Control_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamControl",
			Handler:       _RobotDriver_StreamControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "RobotDriver.proto",
}
